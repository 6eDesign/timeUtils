{"version":3,"file":"timeUtils.umd.js","sources":["../src/lib/utils.js","../src/config.js","../src/index.js"],"sourcesContent":["/**\n * generic function to inject data into token-laden string\n * @param str {String} Required\n * @param name {String} Required\n * @param value {String|Integer} Required\n * @returns {String}\n *\n * @example\n * injectStringData(\"The following is a token: #{tokenName}\", \"tokenName\", 123); \n * @returns {String} \"The following is a token: 123\"\n *\n */\nexport const injectStringData = (str,name,value) => str\n  .replace(new RegExp('#{'+name+'}','g'), value);\n\n/**\n * Generic function to enforce length of string. \n * \n * Pass a string or number to this function and specify the desired length.\n * This function will either pad the # with leading 0's (if str.length < length)\n * or remove data from the end (@fromBack==false) or beginning (@fromBack==true)\n * of the string when str.length > length.\n *\n * When length == str.length or typeof length == 'undefined', this function\n * returns the original @str parameter.\n * \n * @param str {String} Required\n * @param length {Integer} Required\n * @param fromBack {Boolean} Optional\n * @returns {String}\n *\n */\nexport const enforceLength = function(str,length,fromBack) {\n  str = str.toString();\n  if(typeof length == 'undefined') return str;\n  if(str.length == length) return str;\n  fromBack = (typeof fromBack == 'undefined') ? false : fromBack;\n  if(str.length < length) {\n    // pad the beginning of the string w/ enough 0's to reach desired length:\n    while(length - str.length > 0) str = '0' + str;\n  } else if(str.length > length) {\n    if(fromBack) {\n      // grab the desired #/chars from end of string: ex: '2015' -> '15'\n      str = str.substring(str.length-length);\n    } else {\n      // grab the desired #/chars from beginning of string: ex: '2015' -> '20'\n      str = str.substring(0,length);\n    }\n  }\n  return str;\n};","const daysOfWeek = [ \n  'Sunday', \n  'Monday', \n  'Tuesday', \n  'Wednesday', \n  'Thursday', \n  'Friday', \n  'Saturday' \n];\n\nconst monthsOfYear = [ \n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December'\n];\n\nexport let dictionary = { \n  daysOfWeek, \n  monthsOfYear\n}\n\nexport const extendDictionary = (conf) => \n  Object.keys(conf).forEach(key => {\n    if(dictionary[key] && dictionary[key].length == conf[key].length) {\n      dictionary[key] = conf[key];\n    }\n  });\n\nexport const resetDictionary = () => extendDictionary({daysOfWeek,monthsOfYear});","import { injectStringData, enforceLength } from './lib/utils.js';\nimport { dictionary, extendDictionary, resetDictionary } from './config.js';\n\nvar acceptedDateTokens = [\n  { \n    // d: day of the month, 2 digits with leading zeros:\n    key: 'd', \n    method: function(date) { return enforceLength(date.getDate(), 2); } \n  }, { \n    // D: textual representation of day, 3 letters: Sun thru Sat\n    key: 'D', \n    method: function(date) { return enforceLength(dictionary.daysOfWeek[date.getDay()],3); } \n  }, { \n    // j: day of month without leading 0's\n    key: 'j', \n    method: function(date) { return date.getDate(); } \n  }, { \n    // l: full textual representation of day of week: Sunday thru Saturday\n    key: 'l', \n    method: function(date) { return dictionary.daysOfWeek[date.getDay()]; } \n  }, { \n    // F: full text month: 'January' thru 'December'\n    key: 'F', \n    method: function(date) { return dictionary.monthsOfYear[date.getMonth()]; } \n  }, { \n    // m: 2 digit numeric month: '01' - '12':\n    key: 'm', \n    method: function(date) { return enforceLength(date.getMonth()+1,2); } \n  }, { \n    // M: a short textual representation of the month, 3 letters: 'Jan' - 'Dec'\n    key: 'M', \n    method: function(date) { return enforceLength(dictionary.monthsOfYear[date.getMonth()],3); } \n  }, { \n    // n: numeric represetation of month w/o leading 0's, '1' - '12':\n    key: 'n', \n    method: function(date) { return date.getMonth() + 1; } \n  }, { \n    // Y: Full numeric year, 4 digits\n    key: 'Y', \n    method: function(date) { return date.getFullYear(); } \n  }, { \n    // y: 2 digit numeric year:\n    key: 'y', \n    method: function(date) { return enforceLength(date.getFullYear(),2,true); }\n   }\n];\n\nvar acceptedTimeTokens = [\n  { \n    // a: lowercase ante meridiem and post meridiem 'am' or 'pm'\n    key: 'a', \n    method: function(date) { return (date.getHours() > 11) ? 'pm' : 'am'; } \n  }, { \n    // A: uppercase ante merdiiem and post meridiem 'AM' or 'PM'\n    key: 'A', \n    method: function(date) { return (date.getHours() > 11) ? 'PM' : 'AM'; } \n  }, { \n    // g: 12-hour format of an hour without leading zeros 1-12\n    key: 'g', \n    method: function(date) { return date.getHours() % 12 || 12; } \n  }, { \n    // G: 24-hour format of an hour without leading zeros 0-23\n    key: 'G', \n    method: function(date) { return date.getHours(); } \n  }, { \n    // h: 12-hour format of an hour with leading zeros 01-12\n    key: 'h', \n    method: function(date) { return enforceLength(date.getHours()%12 || 12,2); } \n  }, { \n    // H: 24-hour format of an hour with leading zeros: 00-23\n    key: 'H', \n    method: function(date) { return enforceLength(date.getHours(),2); } \n  }, { \n    // i: Minutes with leading zeros 00-59\n    key: 'i', \n    method: function(date) { return enforceLength(date.getMinutes(),2); } \n  }, { \n    // s: Seconds with leading zeros 00-59\n    key: 's', \n    method: function(date) { return enforceLength(date.getSeconds(),2); }\n   }\n];\n\n/**\n * Internationalization object for timeUtils.internationalize().\n * @typedef internationalizeObj\n * @property {Array} [daysOfWeek=[ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ]] daysOfWeek Weekday labels as strings, starting with Sunday.\n * @property {Array} [monthsOfYear=[ 'January','February','March','April','May','June','July','August','September','October','November','December' ]] monthsOfYear Month labels as strings, starting with January.\n */\n\n/**\n * This function can be used to support additional languages by passing an object with \n * `daysOfWeek` and `monthsOfYear` attributes.  Each attribute should be an array of\n * strings (ex: `daysOfWeek: ['monday', 'tuesday', 'wednesday'...]`)\n *\n * @param {internationalizeObj} conf\n */\nexport const internationalize = (conf={}) => { \n  extendDictionary(conf);\n};\n\n/**\n * generic formatDate function which accepts dynamic templates\n * @param date {Date} Required\n * @param template {String} Optional\n * @returns {String}\n *\n * @example\n * formatDate(new Date(), '#{M}. #{j}, #{Y}')\n * @returns {Number} Returns a formatted date\n *\n */\nexport const formatDate = (date,template='#{m}/#{d}/#{Y}') => {\n  acceptedDateTokens.forEach(token => {\n    if(template.indexOf(`#{${token.key}}`) == -1) return; \n    template = injectStringData(template,token.key,token.method(date))\n  }); \n  acceptedTimeTokens.forEach(token => {\n    if(template.indexOf(`#{${token.key}}`) == -1) return;\n    template = injectStringData(template,token.key,token.method(date));\n  });\n  return template;\n};\n\n/**\n * Small function for resetting language to English (used in testing).\n */\nexport const resetInternationalization = () => resetDictionary();"],"names":["const","injectStringData","str","name","value","replace","RegExp","enforceLength","length","fromBack","toString","substring","daysOfWeek","monthsOfYear","dictionary","extendDictionary","conf","Object","keys","forEach","key","acceptedDateTokens","method","date","getDate","getDay","getMonth","getFullYear","acceptedTimeTokens","getHours","getMinutes","getSeconds","template","token","indexOf"],"mappings":"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"}