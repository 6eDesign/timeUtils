{"version":3,"file":"timeUtils.umd.js","sources":["../src/index.js"],"sourcesContent":["/**\n * generic function to inject data into token-laden string\n * @param str {String} Required\n * @param name {String} Required\n * @param value {String|Integer} Required\n * @returns {String}\n *\n * @example\n * injectStringData(\"The following is a token: #{tokenName}\", \"tokenName\", 123); \n * @returns {String} \"The following is a token: 123\"\n *\n */\nvar injectStringData = function(str,name,value) {\n  return str.replace(new RegExp('#{'+name+'}','g'),value);\n};\n\n/**\n * Generic function to enforce length of string. \n * \n * Pass a string or number to this function and specify the desired length.\n * This function will either pad the # with leading 0's (if str.length < length)\n * or remove data from the end (@fromBack==false) or beginning (@fromBack==true)\n * of the string when str.length > length.\n *\n * When length == str.length or typeof length == 'undefined', this function\n * returns the original @str parameter.\n * \n * @param str {String} Required\n * @param length {Integer} Required\n * @param fromBack {Boolean} Optional\n * @returns {String}\n *\n *\n */\nvar enforceLength = function(str,length,fromBack) {\n  str = str.toString();\n  if(typeof length == 'undefined') return str;\n  if(str.length == length) return str;\n  fromBack = (typeof fromBack == 'undefined') ? false : fromBack;\n  if(str.length < length) {\n    // pad the beginning of the string w/ enough 0's to reach desired length:\n    while(length - str.length > 0) str = '0' + str;\n  } else if(str.length > length) {\n    if(fromBack) {\n      // grab the desired #/chars from end of string: ex: '2015' -> '15'\n      str = str.substring(str.length-length);\n    } else {\n      // grab the desired #/chars from beginning of string: ex: '2015' -> '20'\n      str = str.substring(0,length);\n    }\n  }\n  return str;\n};\n\n// Internal variables for storing days of week, months of year: \nvar daysOfWeek = [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ];\nvar monthsOfYear = [ 'January','February','March','April','May','June','July','August','September','October','November','December'];\n\nvar acceptedDateTokens = [\n  // d: day of the month, 2 digits with leading zeros:\n  { key: 'd', method: function(date) { return enforceLength(date.getDate(), 2); } },\n  // D: textual representation of day, 3 letters: Sun thru Sat\n  { key: 'D', method: function(date) { return enforceLength(daysOfWeek[date.getDay()],3); } },\n  // j: day of month without leading 0's\n  { key: 'j', method: function(date) { return date.getDate(); } },\n  // l: full textual representation of day of week: Sunday thru Saturday\n  { key: 'l', method: function(date) { return daysOfWeek[date.getDay()]; } },\n  // F: full text month: 'January' thru 'December'\n  { key: 'F', method: function(date) { return monthsOfYear[date.getMonth()]; } },\n  // m: 2 digit numeric month: '01' - '12':\n  { key: 'm', method: function(date) { return enforceLength(date.getMonth()+1,2); } },\n  // M: a short textual representation of the month, 3 letters: 'Jan' - 'Dec'\n  { key: 'M', method: function(date) { return enforceLength(monthsOfYear[date.getMonth()],3); } },\n  // n: numeric represetation of month w/o leading 0's, '1' - '12':\n  { key: 'n', method: function(date) { return date.getMonth() + 1; } },\n  // Y: Full numeric year, 4 digits\n  { key: 'Y', method: function(date) { return date.getFullYear(); } },\n  // y: 2 digit numeric year:\n  { key: 'y', method: function(date) { return enforceLength(date.getFullYear(),2,true); } }\n];\n\nvar acceptedTimeTokens = [\n  // a: lowercase ante meridiem and post meridiem 'am' or 'pm'\n  { key: 'a', method: function(date) { return (date.getHours() > 11) ? 'pm' : 'am'; } },\n  // A: uppercase ante merdiiem and post meridiem 'AM' or 'PM'\n  { key: 'A', method: function(date) { return (date.getHours() > 11) ? 'PM' : 'AM'; } },\n  // g: 12-hour format of an hour without leading zeros 1-12\n  { key: 'g', method: function(date) { return date.getHours() % 12 || 12; } },\n  // G: 24-hour format of an hour without leading zeros 0-23\n  { key: 'G', method: function(date) { return date.getHours(); } },\n  // h: 12-hour format of an hour with leading zeros 01-12\n  { key: 'h', method: function(date) { return enforceLength(date.getHours()%12 || 12,2); } },\n  // H: 24-hour format of an hour with leading zeros: 00-23\n  { key: 'H', method: function(date) { return enforceLength(date.getHours(),2); } },\n  // i: Minutes with leading zeros 00-59\n  { key: 'i', method: function(date) { return enforceLength(date.getMinutes(),2); } },\n  // s: Seconds with leading zeros 00-59\n  { key: 's', method: function(date) { return enforceLength(date.getSeconds(),2); } }\n  // // T: Timezone abbreviation \"EST\", \"MDT\", ...\n  // { key: 'T', method: function(date) { return date.getTimezone(); } },\n  // O: Difference to Greenwich time (GMT) in hours  +0200, -0200\n  // { key: 'O', method: function(date) { return date.getGMTOffset(); } },\n  // 'P': Difference to Greenwich time (GMT) w/ semicolon between hours:minutes +02:00\n  // { key: 'P', method: function(date) { var offset = date.getGMTOffset(); return offset.slice(0,3)+':'+offset.slice(3); } }\n];\n\nexport const internationalize = (days,months) => { \n  daysOfWeek = days; \n  monthsOfYear = months;\n};\n\n/**\n * generic formatDate function which accepts dynamic templates\n * @param date {Date} Required\n * @param template {String} Optional\n * @returns {String}\n *\n * @example\n * formatDate(new Date(), '#{M}. #{j}, #{Y}')\n * @returns {Number} Returns a formatted date\n *\n */\nexport const formatDate = (date,template='#{m}/#{d}/#{Y}') => {\n  acceptedDateTokens.forEach(token => {\n    if(template.indexOf(`#{${token.key}}`) == -1) return; \n    template = injectStringData(template,token.key,token.method(date))\n  }); \n  acceptedTimeTokens.forEach(token => {\n    if(template.indexOf(`#{${token.key}}`) == -1) return;\n    template = injectStringData(template,token.key,token.method(date));\n  });\n  return template;\n};"],"names":["injectStringData","str","name","value","replace","RegExp","enforceLength","length","fromBack","toString","substring","daysOfWeek","monthsOfYear","acceptedDateTokens","key","method","date","getDate","getDay","getMonth","getFullYear","acceptedTimeTokens","getHours","getMinutes","getSeconds","days","months","template","forEach","token","indexOf"],"mappings":"4LAYA,IAAIA,EAAmB,SAASC,EAAIC,EAAKC,GACvC,OAAOF,EAAIG,QAAQ,IAAIC,OAAO,KAAKH,EAAK,IAAI,KAAKC,IAqB/CG,EAAgB,SAASL,EAAIM,EAAOC,GAEtC,GADAP,EAAMA,EAAIQ,gBACU,IAAVF,EAAuB,OAAON,EACxC,GAAGA,EAAIM,QAAUA,EAAQ,OAAON,EAEhC,GADAO,OAA+B,IAAZA,GAAmCA,EACnDP,EAAIM,OAASA,EAEd,KAA4B,EAAtBA,EAASN,EAAIM,QAAYN,EAAM,IAAMA,OACnCA,EAAIM,OAASA,IAGnBN,EAFCO,EAEKP,EAAIS,UAAUT,EAAIM,OAAOA,GAGzBN,EAAIS,UAAU,EAAEH,IAG1B,OAAON,GAILU,EAAa,CAAE,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YACjFC,EAAe,CAAE,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAAO,SAAS,YAAY,UAAU,WAAW,YAEpHC,EAAqB,CAEvB,CAAEC,IAAK,IAAKC,OAAQ,SAASC,GAAQ,OAAOV,EAAcU,EAAKC,UAAW,KAE1E,CAAEH,IAAK,IAAKC,OAAQ,SAASC,GAAQ,OAAOV,EAAcK,EAAWK,EAAKE,UAAU,KAEpF,CAAEJ,IAAK,IAAKC,OAAQ,SAASC,GAAQ,OAAOA,EAAKC,YAEjD,CAAEH,IAAK,IAAKC,OAAQ,SAASC,GAAQ,OAAOL,EAAWK,EAAKE,YAE5D,CAAEJ,IAAK,IAAKC,OAAQ,SAASC,GAAQ,OAAOJ,EAAaI,EAAKG,cAE9D,CAAEL,IAAK,IAAKC,OAAQ,SAASC,GAAQ,OAAOV,EAAcU,EAAKG,WAAW,EAAE,KAE5E,CAAEL,IAAK,IAAKC,OAAQ,SAASC,GAAQ,OAAOV,EAAcM,EAAaI,EAAKG,YAAY,KAExF,CAAEL,IAAK,IAAKC,OAAQ,SAASC,GAAQ,OAAOA,EAAKG,WAAa,IAE9D,CAAEL,IAAK,IAAKC,OAAQ,SAASC,GAAQ,OAAOA,EAAKI,gBAEjD,CAAEN,IAAK,IAAKC,OAAQ,SAASC,GAAQ,OAAOV,EAAcU,EAAKI,cAAc,GAAE,MAG7EC,EAAqB,CAEvB,CAAEP,IAAK,IAAKC,OAAQ,SAASC,GAAQ,OAA0B,GAAlBA,EAAKM,WAAmB,KAAO,OAE5E,CAAER,IAAK,IAAKC,OAAQ,SAASC,GAAQ,OAA0B,GAAlBA,EAAKM,WAAmB,KAAO,OAE5E,CAAER,IAAK,IAAKC,OAAQ,SAASC,GAAQ,OAAOA,EAAKM,WAAa,IAAM,KAEpE,CAAER,IAAK,IAAKC,OAAQ,SAASC,GAAQ,OAAOA,EAAKM,aAEjD,CAAER,IAAK,IAAKC,OAAQ,SAASC,GAAQ,OAAOV,EAAcU,EAAKM,WAAW,IAAM,GAAG,KAEnF,CAAER,IAAK,IAAKC,OAAQ,SAASC,GAAQ,OAAOV,EAAcU,EAAKM,WAAW,KAE1E,CAAER,IAAK,IAAKC,OAAQ,SAASC,GAAQ,OAAOV,EAAcU,EAAKO,aAAa,KAE5E,CAAET,IAAK,IAAKC,OAAQ,SAASC,GAAQ,OAAOV,EAAcU,EAAKQ,aAAa,kCAS7CC,EAAKC,GACpCf,EAAac,EACbb,EAAec,yBAcUV,EAAKW,GAS9B,sBATuC,kBACvCd,EAAmBe,iBAAQC,IACkB,GAAxCF,EAASG,aAAaD,aACzBF,EAAW3B,EAAiB2B,EAASE,EAAMf,IAAIe,EAAMd,OAAOC,OAE9DK,EAAmBO,iBAAQC,IACkB,GAAxCF,EAASG,aAAaD,aACzBF,EAAW3B,EAAiB2B,EAASE,EAAMf,IAAIe,EAAMd,OAAOC,OAEvDW"}