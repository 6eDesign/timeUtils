{"version":3,"file":"timeUtils.esm.js","sources":["../src/lib/utils.js","../src/config.js","../src/index.js"],"sourcesContent":["/**\r\n * generic function to inject data into token-laden string\r\n * @param str {String} Required\r\n * @param name {String} Required\r\n * @param value {String|Integer} Required\r\n * @returns {String}\r\n *\r\n * @example\r\n * injectStringData(\"The following is a token: #{tokenName}\", \"tokenName\", 123); \r\n * @returns {String} \"The following is a token: 123\"\r\n *\r\n */\r\nexport const injectStringData = (str,name,value) => str\r\n  .replace(new RegExp('#{'+name+'}','g'), value);\r\n\r\n/**\r\n * Generic function to enforce length of string. \r\n * \r\n * Pass a string or number to this function and specify the desired length.\r\n * This function will either pad the # with leading 0's (if str.length < length)\r\n * or remove data from the end (@fromBack==false) or beginning (@fromBack==true)\r\n * of the string when str.length > length.\r\n *\r\n * When length == str.length or typeof length == 'undefined', this function\r\n * returns the original @str parameter.\r\n * \r\n * @param str {String} Required\r\n * @param length {Integer} Required\r\n * @param fromBack {Boolean} Optional\r\n * @returns {String}\r\n *\r\n */\r\nexport const enforceLength = function(str,length,fromBack) {\r\n  str = str.toString();\r\n  if(typeof length == 'undefined') return str;\r\n  if(str.length == length) return str;\r\n  fromBack = (typeof fromBack == 'undefined') ? false : fromBack;\r\n  if(str.length < length) {\r\n    // pad the beginning of the string w/ enough 0's to reach desired length:\r\n    while(length - str.length > 0) str = '0' + str;\r\n  } else if(str.length > length) {\r\n    if(fromBack) {\r\n      // grab the desired #/chars from end of string: ex: '2015' -> '15'\r\n      str = str.substring(str.length-length);\r\n    } else {\r\n      // grab the desired #/chars from beginning of string: ex: '2015' -> '20'\r\n      str = str.substring(0,length);\r\n    }\r\n  }\r\n  return str;\r\n};","const daysOfWeek = [ \r\n  [ 'Sunday', 'Sun' ],\r\n  [ 'Monday', 'Mon' ],\r\n  [ 'Tuesday', 'Tue' ],\r\n  [ 'Wednesday', 'Wed' ],\r\n  [ 'Thursday', 'Thu' ],\r\n  [ 'Friday', 'Fri' ],\r\n  [ 'Saturday', 'Sat' ]\r\n];\r\n\r\nconst monthsOfYear = [ \r\n  [ 'January', 'Jan' ],\r\n  [ 'February', 'Feb' ],\r\n  [ 'March', 'Mar' ],\r\n  [ 'April', 'Apr' ],\r\n  [ 'May', 'May' ],\r\n  [ 'June', 'Jun' ],\r\n  [ 'July', 'Jul' ],\r\n  [ 'August', 'Aug' ],\r\n  [ 'September', 'Sep' ],\r\n  [ 'October', 'Oct' ],\r\n  [ 'November', 'Nov' ],\r\n  [ 'December', 'Dec' ]\r\n];\r\n\r\nexport let dictionary = { \r\n  daysOfWeek, \r\n  monthsOfYear\r\n}\r\n\r\nexport const extendDictionary = (conf) => \r\n  Object.keys(conf).forEach(key => {\r\n    if(dictionary[key] && dictionary[key].length == conf[key].length) {\r\n      dictionary[key] = conf[key];\r\n    }\r\n  });\r\n\r\nexport const resetDictionary = () => extendDictionary({daysOfWeek,monthsOfYear});\r\n","import { injectStringData, enforceLength } from './lib/utils.js';\r\nimport { dictionary, extendDictionary, resetDictionary } from './config.js';\r\n\r\nvar acceptedDateTokens = [\r\n  { \r\n    // d: day of the month, 2 digits with leading zeros:\r\n    key: 'd', \r\n    method: function(date) { return enforceLength(date.getDate(), 2); } \r\n  }, { \r\n    // D: textual representation of day, 3 letters: Sun thru Sat\r\n    key: 'D', \r\n    method: function(date) { return dictionary.daysOfWeek[date.getDay()][1]; } \r\n  }, { \r\n    // j: day of month without leading 0's\r\n    key: 'j', \r\n    method: function(date) { return date.getDate(); } \r\n  }, { \r\n    // l: full textual representation of day of week: Sunday thru Saturday\r\n    key: 'l', \r\n    method: function(date) { return dictionary.daysOfWeek[date.getDay()][0]; } \r\n  }, { \r\n    // F: full text month: 'January' thru 'December'\r\n    key: 'F', \r\n    method: function(date) { return dictionary.monthsOfYear[date.getMonth()][0]; } \r\n  }, { \r\n    // m: 2 digit numeric month: '01' - '12':\r\n    key: 'm', \r\n    method: function(date) { return enforceLength(date.getMonth()+1,2); } \r\n  }, { \r\n    // M: a short textual representation of the month, 3 letters: 'Jan' - 'Dec'\r\n    key: 'M', \r\n    method: function(date) { return dictionary.monthsOfYear[date.getMonth()][1]; } \r\n  }, { \r\n    // n: numeric represetation of month w/o leading 0's, '1' - '12':\r\n    key: 'n', \r\n    method: function(date) { return date.getMonth() + 1; } \r\n  }, { \r\n    // Y: Full numeric year, 4 digits\r\n    key: 'Y', \r\n    method: function(date) { return date.getFullYear(); } \r\n  }, { \r\n    // y: 2 digit numeric year:\r\n    key: 'y', \r\n    method: function(date) { return enforceLength(date.getFullYear(),2,true); }\r\n   }\r\n];\r\n\r\nvar acceptedTimeTokens = [\r\n  { \r\n    // a: lowercase ante meridiem and post meridiem 'am' or 'pm'\r\n    key: 'a', \r\n    method: function(date) { return (date.getHours() > 11) ? 'pm' : 'am'; } \r\n  }, { \r\n    // A: uppercase ante merdiiem and post meridiem 'AM' or 'PM'\r\n    key: 'A', \r\n    method: function(date) { return (date.getHours() > 11) ? 'PM' : 'AM'; } \r\n  }, { \r\n    // g: 12-hour format of an hour without leading zeros 1-12\r\n    key: 'g', \r\n    method: function(date) { return date.getHours() % 12 || 12; } \r\n  }, { \r\n    // G: 24-hour format of an hour without leading zeros 0-23\r\n    key: 'G', \r\n    method: function(date) { return date.getHours(); } \r\n  }, { \r\n    // h: 12-hour format of an hour with leading zeros 01-12\r\n    key: 'h', \r\n    method: function(date) { return enforceLength(date.getHours()%12 || 12,2); } \r\n  }, { \r\n    // H: 24-hour format of an hour with leading zeros: 00-23\r\n    key: 'H', \r\n    method: function(date) { return enforceLength(date.getHours(),2); } \r\n  }, { \r\n    // i: Minutes with leading zeros 00-59\r\n    key: 'i', \r\n    method: function(date) { return enforceLength(date.getMinutes(),2); } \r\n  }, { \r\n    // s: Seconds with leading zeros 00-59\r\n    key: 's', \r\n    method: function(date) { return enforceLength(date.getSeconds(),2); }\r\n   }\r\n];\r\n\r\n/**\r\n * Internationalization object for timeUtils.internationalize().\r\n * @typedef internationalizeObj\r\n * @property {Array} [daysOfWeek=[ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ]] daysOfWeek Weekday labels as strings, starting with Sunday.\r\n * @property {Array} [monthsOfYear=[ 'January','February','March','April','May','June','July','August','September','October','November','December' ]] monthsOfYear Month labels as strings, starting with January.\r\n */\r\n\r\n/**\r\n * This function can be used to support additional languages by passing an object with \r\n * `daysOfWeek` and `monthsOfYear` attributes.  Each attribute should be an array of\r\n * strings (ex: `daysOfWeek: ['monday', 'tuesday', 'wednesday'...]`)\r\n *\r\n * @param {internationalizeObj} conf\r\n */\r\nexport const internationalize = (conf={}) => { \r\n  extendDictionary(conf);\r\n};\r\n\r\n/**\r\n * generic formatDate function which accepts dynamic templates\r\n * @param date {Date} Required\r\n * @param template {String} Optional\r\n * @returns {String}\r\n *\r\n * @example\r\n * formatDate(new Date(), '#{M}. #{j}, #{Y}')\r\n * @returns {Number} Returns a formatted date\r\n *\r\n */\r\nexport const formatDate = (date,template='#{m}/#{d}/#{Y}') => {\r\n  acceptedDateTokens.forEach(token => {\r\n    if(template.indexOf(`#{${token.key}}`) == -1) return; \r\n    template = injectStringData(template,token.key,token.method(date))\r\n  }); \r\n  acceptedTimeTokens.forEach(token => {\r\n    if(template.indexOf(`#{${token.key}}`) == -1) return;\r\n    template = injectStringData(template,token.key,token.method(date));\r\n  });\r\n  return template;\r\n};\r\n\r\n/**\r\n * Small function for resetting language to English (used in testing).\r\n */\r\nexport const resetInternationalization = () => resetDictionary();\r\n"],"names":["const","injectStringData","str","name","value","replace","RegExp","enforceLength","length","fromBack","toString","substring","daysOfWeek","monthsOfYear","dictionary","extendDictionary","conf","Object","keys","forEach","key","acceptedDateTokens","method","date","getDate","getDay","getMonth","getFullYear","acceptedTimeTokens","getHours","getMinutes","getSeconds","template","token","indexOf"],"mappings":"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"}